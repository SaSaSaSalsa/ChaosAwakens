package Me.Akio.ChaosAwakens.Entities;

import Me.Akio.ChaosAwakens.util.GenericTargetSorter;
import net.minecraft.block.Block;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.SharedMonsterAttributes;
import net.minecraft.entity.item.EntityItem;
import net.minecraft.entity.monster.EntityMob;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.potion.Potion;
import net.minecraft.potion.PotionEffect;
import net.minecraft.util.ChunkCoordinates;
import net.minecraft.util.DamageSource;
import net.minecraft.util.MathHelper;
import net.minecraft.world.World;

public class Wasp extends EntityMob
/*     */ {
	/*  58 */   private ChunkCoordinates currentFlightTarget = null;
	/*  59 */   private GenericTargetSorter TargetSorter = null;
	/*  60 */   private int stuck_count = 0;
	/*  61 */   private int lastX = 0;
	/*  62 */   private int lastZ = 0;
	/*  63 */   private Entity rt = null;
	/*     */   
	/*     */   public Wasp(World par1World) {
	/*  66 */     super(par1World);
	/*  67 */     setSize(1.5F, 2.5F);
	/*  68 */     getNavigator().setAvoidsWater(false);
	/*  69 */     this.experienceValue = 25;
	/*  70 */     this.isImmuneToFire = false;
	/*  71 */     this.fireResistance = 5;
	/*  72 */     this.TargetSorter = new GenericTargetSorter((Entity)this);
	/*     */   }
	/*     */ 
	/*     */ 
	/*     */   
	/*     */   protected void applyEntityAttributes() {
	/*  78 */     super.applyEntityAttributes();
	/*  79 */     getEntityAttribute(SharedMonsterAttributes.maxHealth).setBaseValue(getMaxHealth());
	/*  80 */     getEntityAttribute(SharedMonsterAttributes.movementSpeed).setBaseValue(0.3199999928474426D);
	/*     */     
	/*  82 */     getEntityAttribute(SharedMonsterAttributes.attackDamage);
	/*     */   }
	/*     */ 
	/*     */ 
	/*     */   
	/*     */   protected void entityInit() {
	/*  88 */     super.entityInit();
	/*  89 */     this.dataWatcher.addObject(20, Byte.valueOf((byte)0));
	/*     */   }
	/*     */   
	/*     */   protected boolean canDespawn() {
	/*  93 */     if (isNoDespawnRequired()) return false; 
	/*  94 */     return true;
	/*     */   }
	/*     */ 
	/*     */   
	/*     */   public final int getAttacking() {
	/*  99 */     return this.dataWatcher.getWatchableObjectByte(20);
	/*     */   }
	/*     */ 
	/*     */   
	/*     */   public final void setAttacking(int par1) {
	/* 104 */     this.dataWatcher.updateObject(20, Byte.valueOf((byte)par1));
	/*     */   }
	/*     */ 
	/*     */ 
	/*     */ 
	/*     */   
	/*     */   protected float getSoundVolume() {
	/* 111 */     return 0.25F;
	/*     */   }
	/*     */ 
	/*     */ 
	/*     */ 
	/*     */   
	/*     */   protected float getSoundPitch() {
	/* 118 */     return 1.0F;
	/*     */   }
	/*     */ 
	/*     */ 
	/*     */ 
	/*     */   
	/*     */   protected String getLivingSound() {
	/* 125 */     return "orespawn:Beebuzz";
	/*     */   }
	/*     */ 
	/*     */ 
	/*     */ 
	/*     */   
	/*     */   protected String getHurtSound() {
	/* 132 */     return "orespawn:dragonfly_hurt";
	/*     */   }
	/*     */ 
	/*     */ 
	/*     */ 
	/*     */   
	/*     */   protected String getDeathSound() {
	/* 139 */     return "orespawn:alo_death";
	/*     */   }
	/*     */ 
	/*     */ 
	/*     */ 
	/*     */   
	/*     */   public boolean canBePushed() {
	/* 146 */     return true;
	/*     */   }
	/*     */ 
	/*     */   
	/*     */   protected void collideWithEntity(Entity par1Entity) {}
	/*     */   

	/*     */  
	/*     */ 
	/*     */ 
	/*     */ 
	/*     */ 
	/*     */   
	/*     */   protected Item getDropItem() {
	/* 161 */     return Item.getItemFromBlock((Block)Blocks.yellow_flower);
	/*     */   }
	/*     */ 
	/*     */ 
	/*     */ 
	/*     */ 
	/*     */   
	/*     */   protected void dropFewItems(boolean par1, int par2) {
	/* 175 */     int var4 = 2 + this.worldObj.rand.nextInt(10); int i;
	/* 176 */     for (i = 0; i < var4; i++) {
	/* 177 */       dropItem(Items.gold_nugget, 1);
	/*     */     }
	/* 179 */     var4 = 2 + this.worldObj.rand.nextInt(10);
	/* 180 */     this.worldObj.rand.nextInt(10);
	/* 184 */     for (i = 0; i < var4; i++) {
	/* 185 */       dropItem(Item.getItemFromBlock((Block)Blocks.yellow_flower), 1);
	/*     */     }
	/* 187 */     var4 = 2 + this.worldObj.rand.nextInt(10);
	/* 188 */     for (i = 0; i < var4; i++) {
	/* 189 */       dropItem(Items.sugar, 1);
	/*     */     }
	/*     */   }
	/*     */ 
	
	/*     */   private boolean isSuitableTarget(EntityLivingBase par1EntityLiving, boolean par2) {
		/* 432 */     if (par1EntityLiving == null)
		/*     */     {
		/* 434 */       return false;
		/*     */     }
		/* 436 */     if (par1EntityLiving == this)
		/*     */     {
		/* 438 */       return false;
		/*     */     }
		/* 440 */     if (!par1EntityLiving.isEntityAlive())
		/*     */     {
		/*     */       
		/* 443 */       return false;
		/*     */     }
		/* 445 */     if (!getEntitySenses().canSee((Entity)par1EntityLiving))
		/*     */     {
		/*     */       
		/* 448 */       return false;
		/*     */     }
		/* 450 */     if (par1EntityLiving.isInWater())
		/*     */     {
		/* 452 */       return false;
		/*     */     }
		/* 454 */     if (par1EntityLiving instanceof EntityPlayer) {
		/*     */       
		/* 456 */       EntityPlayer p = (EntityPlayer)par1EntityLiving;
		/* 457 */       if (p.capabilities.isCreativeMode == true) {
		/* 458 */         return false;
		/*     */       }
		/* 460 */       return true;
		/*     */     } 
		/* 462 */     if (par1EntityLiving instanceof net.minecraft.entity.passive.EntityVillager)
		/*     */     {
		/* 464 */      return true;
		/*     */     }
		/*     */     
		/* 475 */     return false;
		/*     */   }
	/*     */   
	/*     */   protected boolean isAIEnabled() {
	/* 198 */     return true;
	/*     */   }
	/*     */ 
	/*     */ 
	/*     */ 
	/*     */ 
	/*     */   
	/*     */   public void onUpdate() {
	/* 206 */     super.onUpdate();
	/*     */     
	/* 208 */     this.motionY *= 0.6D;
	/* 209 */     if (isInWater() && this.worldObj.rand.nextInt(4) == 1) {
	/* 210 */       attackEntityAsMob((Entity)this);
	/*     */     }
	/*     */   }
	/*     */ 
	/*     */ 
	/*     */ 
	/*     */ 
	/*     */   
	/*     */   public boolean attackEntityAsMob(Entity par1Entity) {
	float maximumHomeDistance = 0;
	/* 219 */     boolean var4 = par1Entity.attackEntityFrom(DamageSource.causeMobDamage((EntityLivingBase)this), maximumHomeDistance);
	/* 220 */     if (this.worldObj.rand.nextInt(3) == 1 && par1Entity != null) {
	/* 221 */       ((EntityLivingBase)par1Entity).addPotionEffect(new PotionEffect(Potion.poison.id, 50, 0));
	/*     */     }
	/* 223 */     return var4;
	/*     */   }
	/*     */ 
	/*     */ 
	/*     */ 
	/*     */ 
	/*     */   
	/*     */ 
	/*     */ 
	/*     */   
	/*     */   protected void updateAITasks() {
	/* 237 */     int xdir = 1;
	/* 238 */     int zdir = 1;
	/*     */     
	/* 240 */     int keep_trying = 50;
	/*     */ 
	/*     */ 
	/*     */     
	/* 244 */     if (this.isDead)
	/* 245 */       return;  super.updateAITasks();
	/*     */     
	/* 247 */     if (this.lastX == (int)this.posX && this.lastZ == (int)this.posZ) {
	/*     */       
	/* 249 */       this.stuck_count++;
	/*     */     } else {
	/* 251 */       this.stuck_count = 0;
	/* 252 */       this.lastX = (int)this.posX;
	/* 253 */       this.lastZ = (int)this.posZ;
	/*     */     } 
	/*     */ 
	/*     */     
	/* 257 */     if (this.currentFlightTarget == null) {
	/* 258 */       this.currentFlightTarget = new ChunkCoordinates((int)this.posX, (int)this.posY, (int)this.posZ);
	/*     */     }
	/*     */ 
	/*     */     
	/* 262 */     if (this.stuck_count > 50 || this.rand.nextInt(300) == 0 || this.currentFlightTarget.getDistanceSquared((int)this.posX, (int)this.posY, (int)this.posZ) < 2.1F) {
	/*     */       
	/* 264 */       Block bid = Blocks.stone;
	/* 265 */       this.stuck_count = 0;
	/* 266 */       while (bid != Blocks.air && keep_trying != 0) {
	/* 267 */         zdir = this.rand.nextInt(9) + 4;
	/* 268 */         xdir = this.rand.nextInt(9) + 4;
	/* 269 */         if (this.rand.nextInt(2) == 0) zdir = -zdir; 
	/* 270 */         if (this.rand.nextInt(2) == 0) xdir = -xdir; 
	/* 271 */         this.currentFlightTarget.set((int)this.posX + xdir, (int)this.posY + this.rand.nextInt(6) - 3, (int)this.posZ + zdir);
	/* 272 */         bid = this.worldObj.getBlock(this.currentFlightTarget.posX, this.currentFlightTarget.posY, this.currentFlightTarget.posZ);
	/* 273 */         if (bid == Blocks.air && 
	/* 274 */           !canSeeTarget(this.currentFlightTarget.posX, this.currentFlightTarget.posY, this.currentFlightTarget.posZ)) {
	/* 275 */           bid = Blocks.stone;
	/*     */         }
	/*     */         
	/* 278 */         keep_trying--;
	/*     */       }
	/*     */     
	/* 281 */     } else if (this.rand.nextInt(15) == 0) {
	/*     */ 
	/*     */       
	/* 284 */       EntityLivingBase e = null;
	/* 285 */       e = (EntityLivingBase)this.rt;
	/* 286 */       if (e != null && 
	/* 287 */         e.isDead) e = null;
	/*     */       
	/* 289 */       if (e == null) {
	/* 290 */         e = findSomethingToAttack();
	/*     */       }
	/* 292 */       if (e != null) {
	/*     */ 
	/*     */         
	/* 295 */         setAttacking(1);
	/* 296 */         this.currentFlightTarget.set((int)e.posX, (int)e.posY + 1, (int)e.posZ);
	/* 297 */         if (getDistanceSqToEntity((Entity)e) < 16.0D) {
	/* 298 */           attackEntityAsMob((Entity)e);
	/*     */         }
	/*     */       } else {
	/* 301 */         setAttacking(0);
	/*     */       } 
	/*     */     } 
	/*     */     
	/* 305 */     double var1 = this.currentFlightTarget.posX + 0.5D - this.posX;
	/* 306 */     double var3 = this.currentFlightTarget.posY + 0.1D - this.posY;
	/* 307 */     double var5 = this.currentFlightTarget.posZ + 0.5D - this.posZ;
	/* 308 */     this.motionX += (Math.signum(var1) * 0.5D - this.motionX) * 0.30000000149011613D;
	/* 309 */     this.motionY += (Math.signum(var3) * 0.699999988079071D - this.motionY) * 0.20000000149011612D;
	/* 310 */     this.motionZ += (Math.signum(var5) * 0.5D - this.motionZ) * 0.30000000149011613D;
	/* 311 */     float var7 = (float)(Math.atan2(this.motionZ, this.motionX) * 180.0D / Math.PI) - 90.0F;
	/* 312 */     float var8 = MathHelper.wrapAngleTo180_float(var7 - this.rotationYaw);
	/* 313 */     this.moveForward = 1.0F;
	/* 314 */     this.rotationYaw += var8 / 4.0F;
	/*     */   }
	private boolean canSeeTarget(int posX, int posY, int posZ) {
		// TODO Auto-generated method stub
		return false;
	}
	private EntityLivingBase findSomethingToAttack() {
		// TODO Auto-generated method stub
		return null;
	}
}
