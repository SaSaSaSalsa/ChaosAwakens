package Me.Akio.ChaosAwakens.Entities;

import java.util.Collections;
import java.util.Iterator;
import java.util.List;

import Me.Akio.ChaosAwakens.ChaosAwaken;
import Me.Akio.ChaosAwakens.util.GenericTargetSorter;
import net.minecraft.block.Block;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.SharedMonsterAttributes;
import net.minecraft.entity.ai.EntityAIAttackOnCollide;
import net.minecraft.entity.ai.EntityAIHurtByTarget;
import net.minecraft.entity.ai.EntityAILookIdle;
import net.minecraft.entity.ai.EntityAIMoveThroughVillage;
import net.minecraft.entity.ai.EntityAIMoveTowardsRestriction;
import net.minecraft.entity.ai.EntityAINearestAttackableTarget;
import net.minecraft.entity.ai.EntityAIWander;
import net.minecraft.entity.ai.EntityAIWatchClosest;
import net.minecraft.entity.item.EntityItem;
import net.minecraft.entity.monster.EntityMob;
import net.minecraft.entity.passive.EntityVillager;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.potion.Potion;
import net.minecraft.potion.PotionEffect;
import net.minecraft.util.ChunkCoordinates;
import net.minecraft.util.DamageSource;
import net.minecraft.util.MathHelper;
import net.minecraft.world.World;
import net.minecraft.util.Vec3;


public class Wasp extends EntityMob
/*     */ {
	
	
	
	/*  58 */   private ChunkCoordinates currentFlightTarget = null;
	/*  59 */   private GenericTargetSorter TargetSorter = null;
	/*  60 */   private int stuck_count = 0;
	/*  61 */   private int lastX = 0;
	/*  62 */   private int lastZ = 0;
	/*  63 */   private Entity rt = null;
	/*     */   
	/*     */   public Wasp(World par1World) {
	/*  66 */     super(par1World);

    this.tasks.addTask(2, new EntityAIAttackOnCollide(this, EntityPlayer.class, 1.0D, false));
    this.tasks.addTask(4, new EntityAIAttackOnCollide(this, EntityVillager.class, 1.0D, true));
    this.tasks.addTask(5, new EntityAIMoveTowardsRestriction(this, 1.0D));
    this.tasks.addTask(6, new EntityAIMoveThroughVillage(this, 1.0D, false));
    this.tasks.addTask(7, new EntityAIWander(this, 1.0D));
    this.tasks.addTask(8, new EntityAIWatchClosest(this, EntityPlayer.class, 8.0F));
    this.tasks.addTask(8, new EntityAILookIdle(this));
    this.targetTasks.addTask(1, new EntityAIHurtByTarget(this, true));
    this.targetTasks.addTask(2, new EntityAINearestAttackableTarget(this, EntityPlayer.class, 0, true));
    this.targetTasks.addTask(2, new EntityAINearestAttackableTarget(this, EntityVillager.class, 0, false));
	/*  67 */     setSize(1.5F, 2.5F);
	/*  68 */     getNavigator().setAvoidsWater(false);
	/*  69 */     this.experienceValue = 25;
	/*  70 */     this.isImmuneToFire = false;
	/*  71 */     this.fireResistance = 5;
	/*  72 */     this.TargetSorter = new GenericTargetSorter((Entity)this);
	/*     */   }
	/*     */ 
	/*     */   
	/*     */   public final int getAttacking() {
	/*  99 */     return this.dataWatcher.getWatchableObjectByte(20);
	/*     */   }
	/*     */ 
	/*     */   
	/*     */   public final void setAttacking(int par1) {
	/* 104 */     this.dataWatcher.updateObject(20, Byte.valueOf((byte)par1));
	/*     */   }
	/*     */ 
		/*     */   protected void updateAITasks() {
		/* 237 */     int xdir = 1;
		/* 238 */     int zdir = 1;
		/*     */     
		/* 240 */     int keep_trying = 50;
		/*     */ 
		/*     */ 
		/*     */     
		/* 244 */     if (this.isDead)
		/* 245 */       return;  super.updateAITasks();
		/*     */     
		/* 247 */     if (this.lastX == (int)this.posX && this.lastZ == (int)this.posZ) {
		/*     */       
		/* 249 */       this.stuck_count++;
		/*     */     } else {
		/* 251 */       this.stuck_count = 0;
		/* 252 */       this.lastX = (int)this.posX;
		/* 253 */       this.lastZ = (int)this.posZ;
		/*     */     } 
		/*     */ 
		/*     */     
		/* 257 */     if (this.currentFlightTarget == null) {
		/* 258 */       this.currentFlightTarget = new ChunkCoordinates((int)this.posX, (int)this.posY, (int)this.posZ);
		/*     */     }
		/*     */ 
		/*     */     
		/* 262 */     if (this.stuck_count > 50 || this.rand.nextInt(300) == 0 || this.currentFlightTarget.getDistanceSquared((int)this.posX, (int)this.posY, (int)this.posZ) < 2.1F) {
		/*     */       
		/* 264 */       Block bid = Blocks.stone;
		/* 265 */       this.stuck_count = 0;
		/* 266 */       while (bid != Blocks.air && keep_trying != 0) {
		/* 267 */         zdir = this.rand.nextInt(9) + 4;
		/* 268 */         xdir = this.rand.nextInt(9) + 4;
		/* 269 */         if (this.rand.nextInt(2) == 0) zdir = -zdir; 
		/* 270 */         if (this.rand.nextInt(2) == 0) xdir = -xdir; 
		/* 271 */         this.currentFlightTarget.set((int)this.posX + xdir, (int)this.posY + this.rand.nextInt(6) - 3, (int)this.posZ + zdir);
		/* 272 */         bid = this.worldObj.getBlock(this.currentFlightTarget.posX, this.currentFlightTarget.posY, this.currentFlightTarget.posZ);
		/* 273 */         if (bid == Blocks.air && 
		/* 274 */           !canSeeTarget(this.currentFlightTarget.posX, this.currentFlightTarget.posY, this.currentFlightTarget.posZ)) {
		/* 275 */           bid = Blocks.stone;
		/*     */         }
		/*     */         
		/* 278 */         keep_trying--;
		/*     */       }
		/*     */     
		/* 281 */     } else if (this.rand.nextInt(15) == 0) {
		/*     */ 
		/*     */       
		/* 284 */       EntityLivingBase e = null;
		/* 285 */       e = (EntityLivingBase)this.rt;
		/* 286 */       if (e != null && 
		/* 287 */         e.isDead) e = null;

		/* 292 */       if (e != null) {
		/*     */ 
		/*     */         
		/* 295 */         setAttacking(1);
		/* 296 */         this.currentFlightTarget.set((int)e.posX, (int)e.posY + 1, (int)e.posZ);
		/* 297 */         if (getDistanceSqToEntity((Entity)e) < 16.0D) {
		/* 298 */           attackEntityAsMob((Entity)e);
		/*     */         }
		/*     */       } else {
		/* 301 */         setAttacking(0);
		/*     */       } 
		/*     */     } 
		/*     */     
		/* 305 */     double var1 = this.currentFlightTarget.posX + 0.5D - this.posX;
		/* 306 */     double var3 = this.currentFlightTarget.posY + 0.1D - this.posY;
		/* 307 */     double var5 = this.currentFlightTarget.posZ + 0.5D - this.posZ;
		/* 308 */     this.motionX += (Math.signum(var1) * 0.5D - this.motionX) * 0.30000000149011613D;
		/* 309 */     this.motionY += (Math.signum(var3) * 0.699999988079071D - this.motionY) * 0.20000000149011612D;
		/* 310 */     this.motionZ += (Math.signum(var5) * 0.5D - this.motionZ) * 0.30000000149011613D;
		/* 311 */     float var7 = (float)(Math.atan2(this.motionZ, this.motionX) * 180.0D / Math.PI) - 90.0F;
		/* 312 */     float var8 = MathHelper.wrapAngleTo180_float(var7 - this.rotationYaw);
		/* 313 */     this.moveForward = 1.0F;
		/* 314 */     this.rotationYaw += var8 / 4.0F;
			/*     */ 
			/*     */ }
			/*     */
				/*     */
	private boolean canSeeTarget(int posX, int posY, int posZ) {
		// TODO Auto-generated method stub
		return false;
	} }

